/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finseta.api;

import com.finseta.model.BadRequest;
import java.math.BigDecimal;
import com.finseta.model.Payment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-06T08:04:20.125272500Z[Europe/London]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "payments", description = "Payments API")
public interface PaymentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /payments
     * Get Payments
     *
     * @param minAmount The minimum payment amount (inclusive) (optional)
     * @param currencies A list of three letter ISO 4217 codes to include (optional)
     * @return Payments (status code 200)
     */
    @Operation(
        operationId = "paymentsGet",
        description = "Get Payments",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Payments", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Payment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Payment>> _paymentsGet(
        @Parameter(name = "minAmount", description = "The minimum payment amount (inclusive)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minAmount", required = false) BigDecimal minAmount,
        @Parameter(name = "currencies", description = "A list of three letter ISO 4217 codes to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "currencies", required = false) List<String> currencies
    ) {
        return paymentsGet(minAmount, currencies);
    }

    // Override this method
    default  ResponseEntity<List<Payment>> paymentsGet(BigDecimal minAmount, List<String> currencies) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"amount\" : 10.0, \"counterparty\" : { \"type\" : \"SORT_CODE_ACCOUNT_NUMBER\", \"accountNumber\" : \"12345678\", \"sortCode\" : \"123456\" }, \"currency\" : \"GBP\" }, { \"amount\" : 10.0, \"counterparty\" : { \"type\" : \"SORT_CODE_ACCOUNT_NUMBER\", \"accountNumber\" : \"12345678\", \"sortCode\" : \"123456\" }, \"currency\" : \"GBP\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments
     * Create Payment
     *
     * @param payment  (required)
     * @return Payment Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "paymentsPost",
        description = "Create Payment",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Payment Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Payment> _paymentsPost(
        @Parameter(name = "Payment", description = "", required = true) @Valid @RequestBody Payment payment
    ) {
        return paymentsPost(payment);
    }

    // Override this method
    default  ResponseEntity<Payment> paymentsPost(Payment payment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 10.0, \"counterparty\" : { \"type\" : \"SORT_CODE_ACCOUNT_NUMBER\", \"accountNumber\" : \"12345678\", \"sortCode\" : \"123456\" }, \"currency\" : \"GBP\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"message\" : \"message\" }, { \"message\" : \"message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
